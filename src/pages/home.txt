import { useEffect, useState } from "react";
import AnimationWrapper from "../common/page-animation";
import InPageNavigation from "../components/inpage-navigation.component";
import axios from "axios";
import Loader from "../components/loader.component"
import BlogPostCard from "../components/blog-post.component";
import MinimalBlogPost from "../components/nobanner-blog-post.component";
import { activeTabRef } from "../components/inpage-navigation.component";
import NoDataMessage from "../components/nodata.component";
import { filterPaginationData } from "../common/filter-pagination-data";
import LoadMoreDataBtn from "../components/load-more.component";
import TrendingBlogs from "../components/nobanner-blog-post.component";
import FollowingBlogPostCard from "../components/following-blogPost-card";

const HomePage = () => {

    let [blogs, setBlog] = useState(null)
    let [trendingBlogs, setTrendingBlog] = useState(null)
    let [followingBlogs, setFollowingBlogs] = useState(null);
    let [ pageState, setPageState ] = useState("home");

    let categories = ["programming", "gaming", "sports", "social media", "cooking", "tech", "finance", "esports", "travel",]

    const fetchLatestBlogs = ({ page = 1 }) => {
        axios.post(import.meta.env.VITE_SERVER_DOMAIN + "/latest-blogs", { page })
            .then( async ({ data }) => {
                let formatedData = await filterPaginationData({
                    state: blogs,
                    data: data.blogs,
                    page,
                    countRoute: "/all-latest-blogs-count"
                })

                setBlog(formatedData);
            })
            .catch(err => {
                console.log(err);
            })
    }

    const fetchBlogByCategory = ({ page = 1 }) => {
        axios.post(import.meta.env.VITE_SERVER_DOMAIN + "/search-blogs", { tag: pageState, page })
            .then( async ({ data }) => {

                let formatedData = await filterPaginationData({
                    state: blogs,
                    data: data.blogs,
                    page,
                    countRoute: "/search-blogs-count",
                    data_to_send: { tag: pageState }
                })

                setBlog(formatedData);
            })
            .catch(err => {
                console.log(err);
            })
    }

    const fetchTrendingBlogs = () => {
        axios.get(import.meta.env.VITE_SERVER_DOMAIN + "/trending-blogs")
            .then(({ data }) => {
                setTrendingBlog(data.blogs);
            })
            .catch(err => {
                console.log(err);
            })
    }


    const fetchBlogsFromFollowing = (page = 1) => {

        if(access_token){
            
            axios.post(import.meta.env.VITE_SERVER_DOMAIN + "/fetchBlogsFromFollowing", {page}, {
                headers: {
                    'Authorization': `Bearer ${access_token}`
                }
            })
                .then(({ data }) => {
                    console.log(data)
                    setFollowingBlogs(data.blogs)
                })
                .catch(err => {
                    console.log(err);
                });
        }

    };


    const fetchBlogsFromFollowing = ({ page = 1 }) => {
        axios.get(import.meta.env.VITE_SERVER_DOMAIN + "/fetchBlogsFromFollowing", { params: { page } }, {
            headers: {
                'Authorization': `Bearer ${access_token}`
            }
        })
            .then(async ({ data }) => {
                console.log("data", data); // Debug log
                let formatedData = await filterPaginationData({
                    state: followingBlogs,
                    data: data.blogs,
                    page,
                    countRoute: "/following-blog-count"
                });
    
                setFollowingBlogs(formatedData);
                console.log("followingBlogs", followingBlogs); // Debug log
            })
            .catch(err => {
                console.log(err);
            });
    };

    const loadBlogByCategory = (e) => {
        
        let category = e.target.innerText.toLowerCase();

        setBlog(null);

        if(pageState == category){
            setPageState("home")
            return;
        }

        setPageState(category);

    }

    useEffect(() => {
        activeTabRef.current.click();

        switch (pageState) {
            case "home":
                fetchLatestBlogs({ page: 1 });
                break;
            case "following":
                fetchBlogsFromFollowing({ page: 1 });
                break;
            default:
                fetchBlogByCategory({ page: 1 });
                break;
        }

        if (!trendingBlogs) {
            fetchTrendingBlogs();
        }
    }, [pageState]);

    console.log(pageState)


    return (
        <AnimationWrapper>
            <section className="h-cover flex justify-center gap-10">
                {/* for latest blogs */}
                <div className="w-full">

                    <InPageNavigation routes={[ pageState, "trending blogs", "Following"]} defaultHidden={["trending blogs"]}>

                        <>
                            {
                                blogs == null ?( <Loader /> ) : (
                                    blogs.results.length ? 
                                    blogs.results.map((blog, i) => {
                                        return <AnimationWrapper transition={{ duration: 1, delay: i * .1 }} key={i}>
                                            <BlogPostCard content={blog} author={blog.author.personal_info} />
                                        </AnimationWrapper>
                                    })
                                    : <NoDataMessage message="No blogs published"/>
                            )}
                            <LoadMoreDataBtn state={blogs} fetchDataFun={( pageState == "home" ? fetchLatestBlogs : fetchBlogByCategory) } />
                        </>

                        {
                            trendingBlogs == null ? ( <Loader /> ) : (
                                trendingBlogs.length ? 
                                trendingBlogs.map((blog, i) => {
                                    return <AnimationWrapper transition={{ duration: 1, delay: i * .1 }} key={i}>
                                        <MinimalBlogPost blog={blog} index={i} />
                                    </AnimationWrapper>
                                })
                                : <NoDataMessage message="No trending blogs"/>
                        )}

                        <>
                            {
                                followingBlogs == null ? ( <Loader /> ) : (
                                    followingBlogs.length ?
                                    followingBlogs.map((blog, i) => {
                                        return <AnimationWrapper transition={{ duration: 1, delay: i * .1 }} key={i}>
                                            <FollowingBlogPostCard content={blog} author={blog.author.personal_info}/>
                                        </AnimationWrapper>
                                    })
                                : <NoDataMessage message="No blogs published"/>
                            )}
                            <LoadMoreDataBtn state={blogs} fetchDataFun={( pageState == "home" ? fetchBlogsFromFollowing : " ") } />
                        </>


                    </InPageNavigation>

                </div>

                {/* filters and trending blogs */}
                <div className="min-w-[40%] lg:min-w-[400px] max-w-min border-l border-grey pl-8 pt-3 max-md:hidden">

                    <div className="flex flex-col gap-10">

                        <div>
                            <h1 className="font-medium text-xl mb-8">Stories from all interests</h1>

                            <div className="flex gap-3 flex-wrap">
                                {
                                    categories.map((category, i) => {
                                        return <button onClick={loadBlogByCategory} className={"tag " + (pageState == category ? "bg-black text-white" : " "  )} key={i}>
                                            {category}
                                        </button>
                                    })
                                }
                            </div>
                        </div>

                        {/* Trending blogs section */}
                        {pageState !== "following" && (
                            <div>
                                <h1 className="font-medium text-xl mb-8">
                                    Trending{" "}
                                    <i className="fi fi-rr-arrow-trend-up"></i>
                                </h1>
                                {trendingBlogs === null ? (
                                    <Loader />
                                ) : trendingBlogs.length ? (
                                    trendingBlogs.map((blog, i) => (
                                        <AnimationWrapper
                                            transition={{
                                                duration: 1,
                                                delay: i * 0.1,
                                            }}
                                            key={i}
                                        >
                                            <MinimalBlogPost
                                                blog={blog}
                                                index={i}
                                            />
                                        </AnimationWrapper>
                                    ))
                                ) : (
                                    <NoDataMessage message="No trending blogs" />
                                )}
                            </div>
                        )}

                        {/* Following blogs section */}
                        {pageState === "following" && (
                            <div>
                                <h1 className="font-medium text-xl mb-8">
                                    Blogs from Following
                                </h1>
                                {followingBlogs === null ? (
                                    <Loader />
                                ) : followingBlogs.results.length ? (
                                    followingBlogs.results.map((blog, i) => (
                                        <AnimationWrapper
                                            transition={{
                                                duration: 1,
                                                delay: i * 0.1,
                                            }}
                                            key={i}
                                        >
                                            <FollowingBlogPostCard
                                                content={blog}
                                                author={
                                                    blog.author.personal_info
                                                }
                                            />
                                        </AnimationWrapper>
                                    ))
                                ) : (
                                    <NoDataMessage message="No blogs from followed users" />
                                )}
                                <LoadMoreDataBtn
                                    state={followingBlogs}
                                    fetchDataFun={fetchBlogsFromFollowing}
                                />
                            </div>
                        )}
                    </div>

                </div>
            </section>
        </AnimationWrapper>
    )
}

export default HomePage;